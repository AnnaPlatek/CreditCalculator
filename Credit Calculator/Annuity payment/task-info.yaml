type: edu
custom_name: stage3
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult
    import re

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class CreditCalcTest(StageTest):
        def generate(self):
            return [
                TestCase(
                    stdin='a\n1000000\n60\n10',
                    attach=21248,
                ),
                TestCase(
                    stdin='a\n1000000\n8\n9.8',
                    attach=129638,
                ),
                TestCase(
                    stdin='a\n3000000\n302\n11.2',
                    attach=29803,
                ),
                TestCase(
                    stdin='n\n500000\n23000\n7.8',
                    attach=[2, 0],
                ),
                TestCase(
                    stdin='n\n700000\n26000\n9.1',
                    attach=[2, 7],
                ),
                TestCase(
                    stdin='p\n8721.8\n120\n5.6',
                    attach=(800000,),
                ),
                TestCase(
                    stdin='p\n6898.02\n240\n3.4',
                    attach=(1200001,),
                ),
            ]

        def check(self, reply, attach):
            numbers = re.findall(r'[-+]?(\d*\.\d+|\d+)', reply)
            if len(numbers) == 0:
                return CheckResult.wrong(
                    'No numbers in the answer',
                )

            if isinstance(attach, tuple):
                for i in numbers:
                    if abs(attach[0] - float(i)) < 2:
                        return CheckResult.correct()
                output = 'Numbers in your answer: ' + ' '.join(numbers)
                output += 'But correct principal is {0}'.format(attach)
                return CheckResult.wrong(output)

            if isinstance(attach, list):
                # to exclude answers like 'it takes 2.01 years'
                # but 'it takes 2.0 years' let it be OK.
                epsilon = 0.00001
                numbers = [
                    int(float(x)) for x in numbers
                    if abs(int(float(x)) - float(x)) < epsilon
                ]
                if attach[1] == 0:
                    if 'year' in reply and attach[0] in numbers:
                        return CheckResult.correct()

                    output = 'Correct result: {0} years, but you output "{1}"'
                    return CheckResult.wrong(
                        output.format(attach[0], reply),
                    )
                else:
                    if attach[0] in numbers and 'year' in reply:
                        if attach[1] in numbers and 'month' in reply:
                            return CheckResult.correct()

                    output = (
                        'Correct result: {0} years {1} months, '
                        'but you output "{2}"'
                    )
                    return CheckResult.wrong(
                        output.format(attach[0], attach[1], reply),
                    )

            if str(attach) not in reply:
                output = (
                    'Correct annuity payment is {0} but you output numbers: {1}'
                )
                figures = ' '.join(numbers)
                return CheckResult.wrong(
                    output.format(attach, figures),
                )

            return CheckResult.correct()


    if __name__ == '__main__':
        CreditCalcTest('creditcalc.creditcalc').run_tests()
  learner_created: false
- name: creditcalc/creditcalc_copy.py
  visible: true
  text: |
    credit_principal = 'Credit principal: 1000'
    final_output = 'The credit has been repaid!'
    first_month = 'Month 1: paid out 250'
    second_month = 'Month 2: paid out 250'
    third_month = 'Month 3: paid out 500'

    # write your code here
    print(credit_principal)
    print(first_month)
    print(second_month)
    print(third_month)
    print(final_output)
  learner_created: true
- name: creditcalc/creditcalc.py
  visible: true
  text: "# credit_principal = int(input('Enter the credit principal: '))\n# final_output\
    \ = 'The credit has been repaid!'\n# first_month = 'Month 1: paid out 250'\n#\
    \ second_month = 'Month 2: paid out 250'\n# third_month = 'Month 3: paid out 500'\n\
    \n\n# print(credit_principal)\n# print(first_month)\n# print(second_month)\n#\
    \ print(third_month)\n# print(final_output)\n\nimport math\n\ncredit_principal\
    \ = int(input('Enter the credit principal: '))\nthing_to_calculate = input(\"\"\
    \"What do you want to calculate? \ntype \"m\" - for count of months, \ntype \"\
    p\" - for monthly payment: \"\"\")\nif thing_to_calculate == \"m\":\n    monthly_payment\
    \ = int(input('Enter monthly payment: '))\n    count_of_months = round(credit_principal\
    \ / monthly_payment)\n    print('It takes {0} month to repay the credit'.format(count_of_months))\n\
    elif thing_to_calculate == \"p\":\n    count_of_months = int(input('Enter count\
    \ of months: '))\n    monthly_payment = math.ceil(credit_principal / count_of_months)\n\
    \    last_payment = credit_principal - (count_of_months - 1) * monthly_payment\n\
    \    print(monthly_payment)\n    print('Your monthly payment = {0} with last month\
    \ payment = {1}.'.format(monthly_payment, last_payment))\n\n"
  learner_created: true
feedback_link: https://hyperskill.org/projects/90/stages/502/implement
status: Solved
record: 3
